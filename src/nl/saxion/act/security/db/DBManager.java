package nl.saxion.act.security.db;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Properties;
import java.util.TreeMap;

public class DBManager {
	private static DBManager uniqueInstance = null;
	private static Connection con = null;
	private static final String DRIVER = "org.apache.derby.jdbc.EmbeddedDriver";
	private static boolean inMemory = false;

	private String dbName;
	private String user;
	private String password;

	private static Properties configFile;
	private TreeMap<String, PreparedStatement> statements;

	private DBManager() throws IOException {
		configFile = new Properties();
		statements = new TreeMap<String, PreparedStatement>();

		configFile.load(new FileInputStream("properties.conf"));
		dbName = configFile.getProperty("DBName");
		user = configFile.getProperty("DBUser");
		password = configFile.getProperty("DBPassword");

		if (!dbExists(dbName, user, password)) {
			throw new IOException();
		}
	}

	/**
	 * Return the one and only instance of DBManager
	 * 
	 * @return instance else if no connection null
	 */
	public static synchronized DBManager getInstance() {
		if (uniqueInstance == null) {
			try {
				uniqueInstance = new DBManager();
			} catch (IOException e) {
				e.printStackTrace();
				throw new RuntimeException(e);
			}
		}
		return uniqueInstance;
	}

	public static synchronized DBManager initializeInMemory() {
		inMemory = true;
		return getInstance();
	}

	/**
	 * Returns the connection used by this DBManager
	 * 
	 * @return Connection the connection
	 */
	public Connection getConnection() {
		return con;
	}

	/**
	 * Closes the connection used by the DBManager and sets the used instance to
	 * null
	 */
	public void close() {
		try {
			con.close();
			uniqueInstance = null;
			con = null;
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Will prepare the given statement and bufferes it so it doesn't have to be
	 * closed
	 * 
	 * @param statement
	 * @return PreparedStatement the PreparedStatement
	 */
	public PreparedStatement prepareStatement(String statement) {
		try {
			if (con == null) {
				return null;
			} else if (con.isClosed()) {
				return null;
			} else {
				PreparedStatement ppstm = null;
				if (!statements.containsKey(statement)) {
					ppstm = con.prepareStatement(statement);
					statements.put(statement, ppstm);
				} else {
					ppstm = statements.get(statement);
					if (ppstm.isClosed()) {
						ppstm = con.prepareStatement(statement);
						statements.put(statement, ppstm);

						System.err
								.println("WARNING: PreparedStatement was closed, but it shouldn't have!!");
					}
				}
				return ppstm;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Will prepare the given statement and bufferes it so it doesn't have to be
	 * closed Will also prepare the statement to get the generated Primary Keys
	 * back from the database
	 * 
	 * @param statement
	 * @param autoGeneratedKeys
	 * @return PreparedStatement the PreparedStatement
	 */
	public PreparedStatement prepareStatement(String statement,
			int autoGeneratedKeys) {
		try {
			if (con == null) {
				return null;
			} else if (con.isClosed()) {
				return null;
			} else {
				PreparedStatement ppstm = con.prepareStatement(statement,
						autoGeneratedKeys);
				return ppstm;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	private boolean dbExists(String dbName, String user, String password) {
		con = makeConnection(dbName, user, password);
		return con != null;
	}

	private Connection makeConnection(String dbName, String user,
			String password) {
		try {
			if (DRIVER != null) {
				Class.forName(DRIVER);
			}

			return DriverManager.getConnection(getConnectionUrl(dbName), user,
					password);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			System.err.println("Derby Driver cannot be loaded");
		}
		return null;
	}

	private String getConnectionUrl(String dbName) {
		String result = "jdbc:derby:";
		if (inMemory) {
			result += "memory:";
		}
		result += dbName + ";create=true";
		return result;
	}
}
